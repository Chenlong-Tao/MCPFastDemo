# server.py
from mcp.server.fastmcp import FastMCP
import urllib

# Create an MCP server
mcp = FastMCP("Demo")

# Add an addition tool
@mcp.tool()
def add(a: int, b: int) -> int:
    """Add two numbers"""
    return a + b

# Add a dynamic greeting resource
@mcp.resource("greeting://{name}")
def get_greeting(name: str) -> str:
    name = urllib.parse.unquote(name)
    """Get a personalized greeting"""
    return f"Hello, {name}!"

@mcp.prompt(name="analyze-code", description="用于深入分析代码的功能、结构、算法运用、潜在问题及优化策略的详细Prompt")
def analyze_code(code: str) -> list[dict]:
    return [
        {
            "role": "user",
            "content": f"""
以下是一段需要进行详细分析的代码：
{code}

请按照以下步骤和要点进行深入分析：

### 1. 整体功能概述
- 用清晰、简洁的自然语言描述这段代码的主要功能。明确代码想要解决的问题或实现的目标，避免使用过于技术化的术语，确保非专业人员也能大致理解。

### 2. 代码结构剖析
- **模块与函数划分**：识别代码中定义的各个模块（如果有）和函数，说明每个模块和函数的作用以及它们之间的调用关系。
- **控制流程分析**：详细描述代码的执行流程，包括条件语句（如 `if-else`）、循环语句（如 `for`、`while`）的使用情况，以及它们如何影响代码的执行顺序。
- **数据流向**：分析数据在代码中的流动过程，即数据从哪里输入，经过哪些处理步骤，最终输出到哪里。

### 3. 算法与技术运用
- **核心算法识别**：确定代码中使用的主要算法或技术，例如排序算法、搜索算法、机器学习模型等。
- **算法复杂度分析**：估算核心算法的时间复杂度和空间复杂度，说明代码在不同输入规模下的性能表现。
- **技术选型合理性**：评估代码所选用的算法和技术是否适合解决当前问题，是否有更优的替代方案。

### 4. 潜在问题挖掘
- **语法与逻辑错误**：检查代码中是否存在明显的语法错误或逻辑漏洞，例如未定义的变量、无限循环、数组越界等。
- **性能瓶颈**：分析代码中可能导致性能瓶颈的部分，如频繁的磁盘读写、大量的内存分配、低效的算法实现等。
- **安全隐患**：查找代码中可能存在的安全问题，如 SQL 注入、跨站脚本攻击（XSS）、密码明文存储等。
- **兼容性问题**：考虑代码在不同环境（如不同操作系统、不同版本的编程语言）下的兼容性，是否存在潜在的兼容性问题。

### 5. 优化建议提出
- **针对潜在问题**：根据上述分析中发现的潜在问题，提出具体的解决方案和优化建议。
- **性能优化**：给出提高代码性能的建议，如优化算法、减少不必要的计算、合理使用数据结构等。
- **代码可读性与可维护性**：提出改善代码可读性和可维护性的建议，如添加注释、使用有意义的变量名、模块化设计等。

请尽量详细和全面地阐述每个分析要点，确保分析结果对代码的理解、维护和改进具有实际的指导意义。
"""
        }
    ]